// Code generated by MockGen. DO NOT EDIT.
// Source: sourcer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	eventstream "github.com/geniusrabbit/eventstream"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSourcer is a mock of Sourcer interface
type MockSourcer struct {
	ctrl     *gomock.Controller
	recorder *MockSourcerMockRecorder
}

// MockSourcerMockRecorder is the mock recorder for MockSourcer
type MockSourcerMockRecorder struct {
	mock *MockSourcer
}

// NewMockSourcer creates a new mock instance
func NewMockSourcer(ctrl *gomock.Controller) *MockSourcer {
	mock := &MockSourcer{ctrl: ctrl}
	mock.recorder = &MockSourcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSourcer) EXPECT() *MockSourcerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSourcer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSourcerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSourcer)(nil).Close))
}

// Subscribe mocks base method
func (m *MockSourcer) Subscribe(ctx context.Context, stream eventstream.Streamer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockSourcerMockRecorder) Subscribe(ctx, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSourcer)(nil).Subscribe), ctx, stream)
}

// Start mocks base method
func (m *MockSourcer) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSourcerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSourcer)(nil).Start), ctx)
}

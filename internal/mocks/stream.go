// Code generated by MockGen. DO NOT EDIT.
// Source: streamer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	eventstream "github.com/geniusrabbit/eventstream"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStreamer is a mock of Streamer interface
type MockStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamerMockRecorder
}

// MockStreamerMockRecorder is the mock recorder for MockStreamer
type MockStreamerMockRecorder struct {
	mock *MockStreamer
}

// NewMockStreamer creates a new mock instance
func NewMockStreamer(ctrl *gomock.Controller) *MockStreamer {
	mock := &MockStreamer{ctrl: ctrl}
	mock.recorder = &MockStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamer) EXPECT() *MockStreamerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStreamer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStreamerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamer)(nil).Close))
}

// ID mocks base method
func (m *MockStreamer) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockStreamerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStreamer)(nil).ID))
}

// Put mocks base method
func (m *MockStreamer) Put(ctx context.Context, msg eventstream.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStreamerMockRecorder) Put(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStreamer)(nil).Put), ctx, msg)
}

// Check mocks base method
func (m *MockStreamer) Check(ctx context.Context, msg eventstream.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, msg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockStreamerMockRecorder) Check(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockStreamer)(nil).Check), ctx, msg)
}

// Run mocks base method
func (m *MockStreamer) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockStreamerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStreamer)(nil).Run), ctx)
}
